syntax = "proto3";
package replication.v1alpha1;

import "common.proto";

option go_package = "./;replication";

service Replication {
  // ProbeController is used to verify if the CSI driver controller plugin is ready to service Replication APIs
  rpc ProbeController(common.v1.ProbeControllerRequest)
      returns (common.v1.ProbeControllerResponse) {}
  // GetReplicationCapabilities is used to query CSI drivers for their supported replication capabilities
  rpc GetReplicationCapabilities(GetReplicationCapabilityRequest)
      returns (GetReplicationCapabilityResponse) {}
  // CreateStorageProtectionGroup is used to create Storage Protection Group on array
  rpc CreateStorageProtectionGroup(CreateStorageProtectionGroupRequest)
      returns (CreateStorageProtectionGroupResponse) {}
  // CreateRemoteVolume is used to create volume on remote array
  rpc CreateRemoteVolume(CreateRemoteVolumeRequest)
      returns (CreateRemoteVolumeResponse) {}
  // DeleteStorageProtectionGroup is used to delete a Storage Protection group
  rpc DeleteStorageProtectionGroup(DeleteStorageProtectionGroupRequest)
      returns (DeleteStorageProtectionGroupResponse) {}
  // ExecuteAction is used to update the action to failover, testfailover, failback, suspend, etc.
  rpc ExecuteAction(ExecuteActionRequest)
      returns (ExecuteActionResponse) {}
  // GetStorageProtectionGroupStatus is used to monitor the status of Storage Protection groups
  rpc GetStorageProtectionGroupStatus(GetStorageProtectionGroupStatusRequest)
      returns (GetStorageProtectionGroupStatusResponse) {}
}

// Input request used in GetReplicationCapabilities API
message GetReplicationCapabilityRequest {
  // Intentionally left empty
}

// Capabilities of the driver, in terms of the
// RPC calls it supports
message GetReplicationCapabilityResponse {
  repeated ReplicationCapability capabilities = 1;
  repeated SupportedActions actions = 2;
}

// ReplicationCapability is the set of replication capabilities
// which can be advertised by a CSI driver.
// For e.g. if a driver supports discovery of remote volume characteristics
// via the extensions API, then it needs to include DISCOVER_REMOTE_VOLUME
// in its list of replication capabilities
message ReplicationCapability {
  message RPC {
    enum Type {
      CREATE_REMOTE_VOLUME = 0;
      CREATE_PROTECTION_GROUP = 1;
      DELETE_PROTECTION_GROUP = 2;
      MONITOR_PROTECTION_GROUP = 3;
      REPLICATION_ACTION_EXECUTION = 4;
    }
    Type type = 1;
  }
  oneof type {
    RPC rpc = 1;
  }
}

// SupportedActions is the set of action types
// which are supported by a specific CSI driver
message SupportedActions {
  oneof Actions {
    ActionTypes type = 1;
  }
}

message CreateRemoteVolumeRequest {
  // Handle of the local volume, whose remote replica is being requested
  string volume_handle = 1;
  // Optional information about the local volume
  // will be supplied if the driver returned this information
  // in the CSI CreateVolumeResponse
  map<string, string> parameters = 2;
}

message CreateStorageProtectionGroupRequest {
  // Handle of the volume, whose storage protection group is being requested,
  string volume_handle = 1;
  // Optional information about the Volume
  // will be supplied if the driver returned this information
  // in the CSI CreateVolumeResponse
  map<string, string> parameters = 2;
}

message CreateStorageProtectionGroupResponse {
  // Identifier for the local storage protection group
  // This should be unique for one CSI driver
  string local_protection_group_id = 1;
  // Identifier for the remote storage protection group
  // This should be unique for one CSI driver
  string remote_protection_group_id = 2;
  // Attributes for the local storage protection group
  map<string, string> local_protection_group_attributes = 3;
  // Attributes for the remote storage protection group
  map<string, string> remote_protection_group_attributes = 4;
  // status of the protection group
  StorageProtectionGroupStatus status = 5;
}

// Information about the remote replica of a local volume
message CreateRemoteVolumeResponse {
  // Remote Volume
  Volume remote_volume = 1;
}

// Information about a specific volume
message Volume {
  // Size of the volume in bytes
  int64 capacity_bytes = 1;
  // Volume ID - should be the same as one
  // returned in the CSI CreateVolumeResponse
  string volume_id = 2;
  // Optional context information about the volume
  // which can be passed down to the driver in future calls
  map<string, string> volume_context = 3;
}

message DeleteStorageProtectionGroupRequest {
  // Unique identifier, representing the storage protection group
  string protection_group_id = 1;
  // Attributes of the storage protection group (optional)
  map<string, string> protection_group_attributes = 2;
}

message DeleteStorageProtectionGroupResponse {
  // Intentionally left empty
}

// ActionTypes are the exhaustive set of actions which can be performed on
// the protection group
enum ActionTypes {
  // Site-Aware actions
  UNKNOWN_ACTION = 0;
  // Failover - Write disable source device, suspend replication and make the target device ReadWrite
  // Swap personalities of source and target device
  // Failover to the local protection group (storage array)
  FAILOVER_LOCAL = 1;
  // Failover to the remote protection group (storage array)
  FAILOVER_REMOTE = 2;

  // Unplanned Failover
  // Same as Failover but used in case of disaster
  // Unplanned failover to the local storage array
  UNPLANNED_FAILOVER_LOCAL = 3;
  // Unplanned failover to the remote storage array
  UNPLANNED_FAILOVER_REMOTE = 4;

  // Reprotect
  // Restart the replication in reverse direction
  // Resume replication from local -> remote storage array
  REPROTECT_LOCAL = 5;
  // Resume replication from remote -> local storage array
  REPROTECT_REMOTE = 6;

  // Same as Failover but don't swap source & target devices
  FAILOVER_WITHOUT_SWAP_LOCAL = 7;
  FAILOVER_WITHOUT_SWAP_REMOTE = 8;

  // Failback to the source device while keeping all writes done at target device
  FAILBACK_LOCAL = 9;
  FAILBACK_REMOTE = 10;

  // Same as Failback but keep data from source (discard any writes at target)
  ACTION_FAILBACK_DISCARD_CHANGES_LOCAL = 11;
  ACTION_FAILBACK_DISCARD_CHANGES_REMOTE = 12;

  // Swap personalities of source and target devices
  SWAP_LOCAL = 13;
  SWAP_REMOTE = 14;

  // Suspend the replication link
  SUSPEND = 15;
  // Resume the replication link
  RESUME = 16;
  // Copy pending tracks from source to target
  ESTABLISH = 17;
  // Same as ESTABLISH
  SYNC = 18;
  TEST_FAILOVER = 19;
  TEST_FAILOVER_STOP = 20;

}

message Action{
  ActionTypes action_types = 1;
}

message ExecuteActionRequest{
  string action_id = 1;
  string protection_group_id = 2;
  oneof action_types {
    Action action = 3;
  }
  map<string, string> protection_group_attributes = 4;
  string remote_protection_group_id = 5;
  map<string, string> remote_protection_group_attributes = 6;
}

message ExecuteActionResponse{
  bool success = 1;
  oneof action_types {
    Action action = 2;
  }
  // status of the protection group
  StorageProtectionGroupStatus status = 3;
}
message GetStorageProtectionGroupStatusRequest {
  // Protection group to be monitored
  string protection_group_id = 1;
  map<string, string> protection_group_attributes = 2;
}

message StorageProtectionGroupStatus {
  enum State {
    SYNCHRONIZED = 0;
    SYNC_IN_PROGRESS = 1;
    SUSPENDED = 2;
    FAILEDOVER = 3;
    INVALID = 4;
    UNKNOWN = 5;
  }
  // The state of the protection group
  State state = 1;
  bool isSource = 2;
}

message GetStorageProtectionGroupStatusResponse {
  // Returns status of the protection group
  StorageProtectionGroupStatus status = 1;
}

