// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.14.0
// source: volumeGroupSnapshot.proto

package volumegroupsnapshot

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateVolumeGroupSnapshotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// volumeIDs to be snapped
	SourceVolumeIDs []string `protobuf:"bytes,1,rep,name=SourceVolumeIDs,proto3" json:"SourceVolumeIDs,omitempty"`
	// name of snapshot group
	Name string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	// parameters map from VolumeGroupSnapshot instance
	Parameters map[string]string `protobuf:"bytes,3,rep,name=Parameters,proto3" json:"Parameters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CreateVolumeGroupSnapshotRequest) Reset() {
	*x = CreateVolumeGroupSnapshotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volumeGroupSnapshot_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVolumeGroupSnapshotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVolumeGroupSnapshotRequest) ProtoMessage() {}

func (x *CreateVolumeGroupSnapshotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_volumeGroupSnapshot_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVolumeGroupSnapshotRequest.ProtoReflect.Descriptor instead.
func (*CreateVolumeGroupSnapshotRequest) Descriptor() ([]byte, []int) {
	return file_volumeGroupSnapshot_proto_rawDescGZIP(), []int{0}
}

func (x *CreateVolumeGroupSnapshotRequest) GetSourceVolumeIDs() []string {
	if x != nil {
		return x.SourceVolumeIDs
	}
	return nil
}

func (x *CreateVolumeGroupSnapshotRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateVolumeGroupSnapshotRequest) GetParameters() map[string]string {
	if x != nil {
		return x.Parameters
	}
	return nil
}

type CreateVolumeGroupSnapshotResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// snapshots in group
	Snapshots []*Snapshot `protobuf:"bytes,1,rep,name=Snapshots,proto3" json:"Snapshots,omitempty"`
	// snapshot group csi id on array
	SnapshotGroupID string `protobuf:"bytes,2,opt,name=SnapshotGroupID,proto3" json:"SnapshotGroupID,omitempty"`
	//time VGS was created
	CreationTime int64 `protobuf:"varint,3,opt,name=CreationTime,proto3" json:"CreationTime,omitempty"`
}

func (x *CreateVolumeGroupSnapshotResponse) Reset() {
	*x = CreateVolumeGroupSnapshotResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volumeGroupSnapshot_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVolumeGroupSnapshotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVolumeGroupSnapshotResponse) ProtoMessage() {}

func (x *CreateVolumeGroupSnapshotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_volumeGroupSnapshot_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVolumeGroupSnapshotResponse.ProtoReflect.Descriptor instead.
func (*CreateVolumeGroupSnapshotResponse) Descriptor() ([]byte, []int) {
	return file_volumeGroupSnapshot_proto_rawDescGZIP(), []int{1}
}

func (x *CreateVolumeGroupSnapshotResponse) GetSnapshots() []*Snapshot {
	if x != nil {
		return x.Snapshots
	}
	return nil
}

func (x *CreateVolumeGroupSnapshotResponse) GetSnapshotGroupID() string {
	if x != nil {
		return x.SnapshotGroupID
	}
	return ""
}

func (x *CreateVolumeGroupSnapshotResponse) GetCreationTime() int64 {
	if x != nil {
		return x.CreationTime
	}
	return 0
}

type DeleteVolumeGroupSnapshotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SnapshotGroupID string `protobuf:"bytes,1,opt,name=SnapshotGroupID,proto3" json:"SnapshotGroupID,omitempty"`
}

func (x *DeleteVolumeGroupSnapshotRequest) Reset() {
	*x = DeleteVolumeGroupSnapshotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volumeGroupSnapshot_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteVolumeGroupSnapshotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVolumeGroupSnapshotRequest) ProtoMessage() {}

func (x *DeleteVolumeGroupSnapshotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_volumeGroupSnapshot_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVolumeGroupSnapshotRequest.ProtoReflect.Descriptor instead.
func (*DeleteVolumeGroupSnapshotRequest) Descriptor() ([]byte, []int) {
	return file_volumeGroupSnapshot_proto_rawDescGZIP(), []int{2}
}

func (x *DeleteVolumeGroupSnapshotRequest) GetSnapshotGroupID() string {
	if x != nil {
		return x.SnapshotGroupID
	}
	return ""
}

type DeleteVolumeGroupSnapshotResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteVolumeGroupSnapshotResponse) Reset() {
	*x = DeleteVolumeGroupSnapshotResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volumeGroupSnapshot_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteVolumeGroupSnapshotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVolumeGroupSnapshotResponse) ProtoMessage() {}

func (x *DeleteVolumeGroupSnapshotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_volumeGroupSnapshot_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVolumeGroupSnapshotResponse.ProtoReflect.Descriptor instead.
func (*DeleteVolumeGroupSnapshotResponse) Descriptor() ([]byte, []int) {
	return file_volumeGroupSnapshot_proto_rawDescGZIP(), []int{3}
}

type Snapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Size of the source volume in bytes
	CapacityBytes int64 `protobuf:"varint,1,opt,name=capacity_bytes,json=capacityBytes,proto3" json:"capacity_bytes,omitempty"`
	// Snapshot ID - CSI snapshot ID. Should uniquely identify the snapshot for the driver.
	SnapId string `protobuf:"bytes,2,opt,name=snap_id,json=snapId,proto3" json:"snap_id,omitempty"`
	// ID of source volume
	SourceId string `protobuf:"bytes,3,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
	// bool value to determine if this snap is ready for use
	ReadyToUse bool `protobuf:"varint,4,opt,name=readyToUse,proto3" json:"readyToUse,omitempty"`
	// time snapshot was created
	CreationTime int64 `protobuf:"varint,5,opt,name=CreationTime,proto3" json:"CreationTime,omitempty"`
	//name of snapshot found in array
	Name string `protobuf:"bytes,6,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *Snapshot) Reset() {
	*x = Snapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volumeGroupSnapshot_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Snapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Snapshot) ProtoMessage() {}

func (x *Snapshot) ProtoReflect() protoreflect.Message {
	mi := &file_volumeGroupSnapshot_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Snapshot.ProtoReflect.Descriptor instead.
func (*Snapshot) Descriptor() ([]byte, []int) {
	return file_volumeGroupSnapshot_proto_rawDescGZIP(), []int{4}
}

func (x *Snapshot) GetCapacityBytes() int64 {
	if x != nil {
		return x.CapacityBytes
	}
	return 0
}

func (x *Snapshot) GetSnapId() string {
	if x != nil {
		return x.SnapId
	}
	return ""
}

func (x *Snapshot) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

func (x *Snapshot) GetReadyToUse() bool {
	if x != nil {
		return x.ReadyToUse
	}
	return false
}

func (x *Snapshot) GetCreationTime() int64 {
	if x != nil {
		return x.CreationTime
	}
	return 0
}

func (x *Snapshot) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

var File_volumeGroupSnapshot_proto protoreflect.FileDescriptor

var file_volumeGroupSnapshot_proto_rawDesc = []byte{
	0x0a, 0x19, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x22, 0x8f, 0x02, 0x0a, 0x20, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28,
	0x0a, 0x0f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x44,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x44, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x6e, 0x0a, 0x0a,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x4e, 0x2e, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0a, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x3d, 0x0a, 0x0f,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb7, 0x01, 0x0a, 0x21,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x44, 0x0a, 0x09, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x09, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x44, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x4c, 0x0a, 0x20, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x44, 0x22, 0x23, 0x0a, 0x21, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xbf, 0x01, 0x0a, 0x08, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63,
	0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x17, 0x0a, 0x07,
	0x73, 0x6e, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x6e, 0x61, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x79, 0x54, 0x6f, 0x55, 0x73, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x79, 0x54, 0x6f, 0x55,
	0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0xd7, 0x02, 0x0a, 0x13, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x12, 0x9e, 0x01, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x12, 0x3e, 0x2e, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3f, 0x2e, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x9e, 0x01, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x12, 0x3e, 0x2e, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x3f, 0x2e, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x42, 0x18, 0x5a, 0x16, 0x2e, 0x2f, 0x3b, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_volumeGroupSnapshot_proto_rawDescOnce sync.Once
	file_volumeGroupSnapshot_proto_rawDescData = file_volumeGroupSnapshot_proto_rawDesc
)

func file_volumeGroupSnapshot_proto_rawDescGZIP() []byte {
	file_volumeGroupSnapshot_proto_rawDescOnce.Do(func() {
		file_volumeGroupSnapshot_proto_rawDescData = protoimpl.X.CompressGZIP(file_volumeGroupSnapshot_proto_rawDescData)
	})
	return file_volumeGroupSnapshot_proto_rawDescData
}

var file_volumeGroupSnapshot_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_volumeGroupSnapshot_proto_goTypes = []interface{}{
	(*CreateVolumeGroupSnapshotRequest)(nil),  // 0: volumegroupsnapshot.v1alpha1.CreateVolumeGroupSnapshotRequest
	(*CreateVolumeGroupSnapshotResponse)(nil), // 1: volumegroupsnapshot.v1alpha1.CreateVolumeGroupSnapshotResponse
	(*DeleteVolumeGroupSnapshotRequest)(nil),  // 2: volumegroupsnapshot.v1alpha1.DeleteVolumeGroupSnapshotRequest
	(*DeleteVolumeGroupSnapshotResponse)(nil), // 3: volumegroupsnapshot.v1alpha1.DeleteVolumeGroupSnapshotResponse
	(*Snapshot)(nil), // 4: volumegroupsnapshot.v1alpha1.Snapshot
	nil,              // 5: volumegroupsnapshot.v1alpha1.CreateVolumeGroupSnapshotRequest.ParametersEntry
}
var file_volumeGroupSnapshot_proto_depIdxs = []int32{
	5, // 0: volumegroupsnapshot.v1alpha1.CreateVolumeGroupSnapshotRequest.Parameters:type_name -> volumegroupsnapshot.v1alpha1.CreateVolumeGroupSnapshotRequest.ParametersEntry
	4, // 1: volumegroupsnapshot.v1alpha1.CreateVolumeGroupSnapshotResponse.Snapshots:type_name -> volumegroupsnapshot.v1alpha1.Snapshot
	0, // 2: volumegroupsnapshot.v1alpha1.VolumeGroupSnapshot.CreateVolumeGroupSnapshot:input_type -> volumegroupsnapshot.v1alpha1.CreateVolumeGroupSnapshotRequest
	2, // 3: volumegroupsnapshot.v1alpha1.VolumeGroupSnapshot.DeleteVolumeGroupSnapshot:input_type -> volumegroupsnapshot.v1alpha1.DeleteVolumeGroupSnapshotRequest
	1, // 4: volumegroupsnapshot.v1alpha1.VolumeGroupSnapshot.CreateVolumeGroupSnapshot:output_type -> volumegroupsnapshot.v1alpha1.CreateVolumeGroupSnapshotResponse
	3, // 5: volumegroupsnapshot.v1alpha1.VolumeGroupSnapshot.DeleteVolumeGroupSnapshot:output_type -> volumegroupsnapshot.v1alpha1.DeleteVolumeGroupSnapshotResponse
	4, // [4:6] is the sub-list for method output_type
	2, // [2:4] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_volumeGroupSnapshot_proto_init() }
func file_volumeGroupSnapshot_proto_init() {
	if File_volumeGroupSnapshot_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_volumeGroupSnapshot_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVolumeGroupSnapshotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volumeGroupSnapshot_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVolumeGroupSnapshotResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volumeGroupSnapshot_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteVolumeGroupSnapshotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volumeGroupSnapshot_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteVolumeGroupSnapshotResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volumeGroupSnapshot_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Snapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_volumeGroupSnapshot_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_volumeGroupSnapshot_proto_goTypes,
		DependencyIndexes: file_volumeGroupSnapshot_proto_depIdxs,
		MessageInfos:      file_volumeGroupSnapshot_proto_msgTypes,
	}.Build()
	File_volumeGroupSnapshot_proto = out.File
	file_volumeGroupSnapshot_proto_rawDesc = nil
	file_volumeGroupSnapshot_proto_goTypes = nil
	file_volumeGroupSnapshot_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// VolumeGroupSnapshotClient is the client API for VolumeGroupSnapshot service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VolumeGroupSnapshotClient interface {
	// CreateVolumeGroupSnapshot will take in a CreateVolumeGroupSnapshotRequest that will contain:
	// 1. An array of volume IDs to be snapped for the volume snapshot group
	// 2. A name for the volume snapshot group
	// 3. Parameters for the VolumeGroupSnapshot instance
	// It will return a CreateVolumeGroupSnapshotResponse, which contains an array of snapshots, and an id for the group
	CreateVolumeGroupSnapshot(ctx context.Context, in *CreateVolumeGroupSnapshotRequest, opts ...grpc.CallOption) (*CreateVolumeGroupSnapshotResponse, error)
	// DeleteVolumeGroupSnapshot will be used to delete a VolumeGroupSnapshot
	DeleteVolumeGroupSnapshot(ctx context.Context, in *DeleteVolumeGroupSnapshotRequest, opts ...grpc.CallOption) (*DeleteVolumeGroupSnapshotResponse, error)
}

type volumeGroupSnapshotClient struct {
	cc grpc.ClientConnInterface
}

func NewVolumeGroupSnapshotClient(cc grpc.ClientConnInterface) VolumeGroupSnapshotClient {
	return &volumeGroupSnapshotClient{cc}
}

func (c *volumeGroupSnapshotClient) CreateVolumeGroupSnapshot(ctx context.Context, in *CreateVolumeGroupSnapshotRequest, opts ...grpc.CallOption) (*CreateVolumeGroupSnapshotResponse, error) {
	out := new(CreateVolumeGroupSnapshotResponse)
	err := c.cc.Invoke(ctx, "/volumegroupsnapshot.v1alpha1.VolumeGroupSnapshot/CreateVolumeGroupSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeGroupSnapshotClient) DeleteVolumeGroupSnapshot(ctx context.Context, in *DeleteVolumeGroupSnapshotRequest, opts ...grpc.CallOption) (*DeleteVolumeGroupSnapshotResponse, error) {
	out := new(DeleteVolumeGroupSnapshotResponse)
	err := c.cc.Invoke(ctx, "/volumegroupsnapshot.v1alpha1.VolumeGroupSnapshot/DeleteVolumeGroupSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VolumeGroupSnapshotServer is the server API for VolumeGroupSnapshot service.
type VolumeGroupSnapshotServer interface {
	// CreateVolumeGroupSnapshot will take in a CreateVolumeGroupSnapshotRequest that will contain:
	// 1. An array of volume IDs to be snapped for the volume snapshot group
	// 2. A name for the volume snapshot group
	// 3. Parameters for the VolumeGroupSnapshot instance
	// It will return a CreateVolumeGroupSnapshotResponse, which contains an array of snapshots, and an id for the group
	CreateVolumeGroupSnapshot(context.Context, *CreateVolumeGroupSnapshotRequest) (*CreateVolumeGroupSnapshotResponse, error)
	// DeleteVolumeGroupSnapshot will be used to delete a VolumeGroupSnapshot
	DeleteVolumeGroupSnapshot(context.Context, *DeleteVolumeGroupSnapshotRequest) (*DeleteVolumeGroupSnapshotResponse, error)
}

// UnimplementedVolumeGroupSnapshotServer can be embedded to have forward compatible implementations.
type UnimplementedVolumeGroupSnapshotServer struct {
}

func (*UnimplementedVolumeGroupSnapshotServer) CreateVolumeGroupSnapshot(context.Context, *CreateVolumeGroupSnapshotRequest) (*CreateVolumeGroupSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVolumeGroupSnapshot not implemented")
}
func (*UnimplementedVolumeGroupSnapshotServer) DeleteVolumeGroupSnapshot(context.Context, *DeleteVolumeGroupSnapshotRequest) (*DeleteVolumeGroupSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVolumeGroupSnapshot not implemented")
}

func RegisterVolumeGroupSnapshotServer(s *grpc.Server, srv VolumeGroupSnapshotServer) {
	s.RegisterService(&_VolumeGroupSnapshot_serviceDesc, srv)
}

func _VolumeGroupSnapshot_CreateVolumeGroupSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVolumeGroupSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeGroupSnapshotServer).CreateVolumeGroupSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/volumegroupsnapshot.v1alpha1.VolumeGroupSnapshot/CreateVolumeGroupSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeGroupSnapshotServer).CreateVolumeGroupSnapshot(ctx, req.(*CreateVolumeGroupSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VolumeGroupSnapshot_DeleteVolumeGroupSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVolumeGroupSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeGroupSnapshotServer).DeleteVolumeGroupSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/volumegroupsnapshot.v1alpha1.VolumeGroupSnapshot/DeleteVolumeGroupSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeGroupSnapshotServer).DeleteVolumeGroupSnapshot(ctx, req.(*DeleteVolumeGroupSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _VolumeGroupSnapshot_serviceDesc = grpc.ServiceDesc{
	ServiceName: "volumegroupsnapshot.v1alpha1.VolumeGroupSnapshot",
	HandlerType: (*VolumeGroupSnapshotServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVolumeGroupSnapshot",
			Handler:    _VolumeGroupSnapshot_CreateVolumeGroupSnapshot_Handler,
		},
		{
			MethodName: "DeleteVolumeGroupSnapshot",
			Handler:    _VolumeGroupSnapshot_DeleteVolumeGroupSnapshot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "volumeGroupSnapshot.proto",
}
