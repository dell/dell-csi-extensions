syntax = "proto3";
package volumegroupsnapshot.v1alpha1;

option go_package = "./;volumegroupsnapshot";

service VolumeGroupSnapshot {
	// CreateVolumeGroupSnapshot will take in a CreateVolumeGroupSnapshotRequest that will contain:
	// 1. An array of volume IDs to be snapped for the volume snapshot group
	// 2. A name for the volume snapshot group
	// 3. Parameters for the VolumeGroupSnapshot instance
	// It will return a CreateVolumeGroupSnapshotResponse, which contains an array of snapshots, and an id for the group  
	rpc CreateVolumeGroupSnapshot(CreateVolumeGroupSnapshotRequest)
	returns (CreateVolumeGroupSnapshotResponse) {}

	// DeleteVolumeGroupSnapshot will be used to delete a VolumeGroupSnapshot
	rpc DeleteVolumeGroupSnapshot(DeleteVolumeGroupSnapshotRequest)
	returns (DeleteVolumeGroupSnapshotResponse) {}

}

message CreateVolumeGroupSnapshotRequest {
	// volumeIDs to be snapped	
	repeated string SourceVolumeIDs = 1;
 
	// name of snapshot group
	string Name = 2; 

	// parameters map from VolumeGroupSnapshot instance
	map<string, string> Parameters = 3; 

} 

message CreateVolumeGroupSnapshotResponse {
	// snapshots in group
	repeated Snapshot Snapshots = 1;

	// snapshot group csi id on array
	string SnapshotGroupID  = 2;

	//time VGS was created
	int64 CreationTime = 3; 

}

message DeleteVolumeGroupSnapshotRequest {
	string SnapshotGroupID = 1;  
}

message DeleteVolumeGroupSnapshotResponse {
	// left empty 
}

message Snapshot {
	// Size of the source volume in bytes
	int64 capacity_bytes = 1;

	// Snapshot ID - CSI snapshot ID. Should uniquely identify the snapshot for the driver.
	string snap_id = 2;

	// ID of source volume
	string source_id = 3;
 
	// bool value to determine if this snap is ready for use
	bool readyToUse = 4;

	// time snapshot was created 
	int64 CreationTime = 5; 

	//name of snapshot found in array 
	string Name = 6; 

}
