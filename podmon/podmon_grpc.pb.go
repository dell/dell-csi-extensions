// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: podmon.proto

package podmon

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Podmon_ValidateVolumeHostConnectivity_FullMethodName = "/podmon.v1.Podmon/ValidateVolumeHostConnectivity"
)

// PodmonClient is the client API for Podmon service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Proprietary Extensions to CSI drivers, formatted and handled similar to CSI requests.
type PodmonClient interface {
	// ValidateVolumeHostconnectivity validates host connectivity for one or more volumes, by
	// either or both of two methds:
	// 1. Verifying the link status of the host, returned in the connected.
	// 2. Verifying if any I/O activity has been observerd in the recent past, returned in ios_in_progress.
	ValidateVolumeHostConnectivity(ctx context.Context, in *ValidateVolumeHostConnectivityRequest, opts ...grpc.CallOption) (*ValidateVolumeHostConnectivityResponse, error)
}

type podmonClient struct {
	cc grpc.ClientConnInterface
}

func NewPodmonClient(cc grpc.ClientConnInterface) PodmonClient {
	return &podmonClient{cc}
}

func (c *podmonClient) ValidateVolumeHostConnectivity(ctx context.Context, in *ValidateVolumeHostConnectivityRequest, opts ...grpc.CallOption) (*ValidateVolumeHostConnectivityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateVolumeHostConnectivityResponse)
	err := c.cc.Invoke(ctx, Podmon_ValidateVolumeHostConnectivity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PodmonServer is the server API for Podmon service.
// All implementations should embed UnimplementedPodmonServer
// for forward compatibility.
//
// Proprietary Extensions to CSI drivers, formatted and handled similar to CSI requests.
type PodmonServer interface {
	// ValidateVolumeHostconnectivity validates host connectivity for one or more volumes, by
	// either or both of two methds:
	// 1. Verifying the link status of the host, returned in the connected.
	// 2. Verifying if any I/O activity has been observerd in the recent past, returned in ios_in_progress.
	ValidateVolumeHostConnectivity(context.Context, *ValidateVolumeHostConnectivityRequest) (*ValidateVolumeHostConnectivityResponse, error)
}

// UnimplementedPodmonServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPodmonServer struct{}

func (UnimplementedPodmonServer) ValidateVolumeHostConnectivity(context.Context, *ValidateVolumeHostConnectivityRequest) (*ValidateVolumeHostConnectivityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateVolumeHostConnectivity not implemented")
}
func (UnimplementedPodmonServer) testEmbeddedByValue() {}

// UnsafePodmonServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PodmonServer will
// result in compilation errors.
type UnsafePodmonServer interface {
	mustEmbedUnimplementedPodmonServer()
}

func RegisterPodmonServer(s grpc.ServiceRegistrar, srv PodmonServer) {
	// If the following call pancis, it indicates UnimplementedPodmonServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Podmon_ServiceDesc, srv)
}

func _Podmon_ValidateVolumeHostConnectivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateVolumeHostConnectivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodmonServer).ValidateVolumeHostConnectivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Podmon_ValidateVolumeHostConnectivity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodmonServer).ValidateVolumeHostConnectivity(ctx, req.(*ValidateVolumeHostConnectivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Podmon_ServiceDesc is the grpc.ServiceDesc for Podmon service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Podmon_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "podmon.v1.Podmon",
	HandlerType: (*PodmonServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ValidateVolumeHostConnectivity",
			Handler:    _Podmon_ValidateVolumeHostConnectivity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "podmon.proto",
}
