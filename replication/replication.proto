syntax = "proto3";
package replication.v1alpha1;

import "google/protobuf/wrappers.proto";

option go_package = "./;replication";

service Replication {
  // ProbeController is used to verify if the CSI driver controller plugin is ready to service Replication APIs
  rpc ProbeController(ProbeControllerRequest)
      returns (ProbeControllerResponse) {}
  // GetReplicationCapabilities is used to query CSI drivers for their supported replication capabilities
  rpc GetReplicationCapabilities(GetReplicationCapabilityRequest)
      returns (GetReplicationCapabilityResponse) {}
  // CreateStorageProtectionGroup is used to create Storage Protection Group on array
  rpc CreateStorageProtectionGroup(CreateStorageProtectionGroupRequest)
      returns (CreateStorageProtectionGroupResponse) {}
  // CreateRemoteVolume is used to create volume on remote array
  rpc CreateRemoteVolume(CreateRemoteVolumeRequest)
      returns (CreateRemoteVolumeResponse) {}
  // DeleteStorageProtectionGroup is used to delete a Storage Protection group
  rpc DeleteStorageProtectionGroup(DeleteStorageProtectionGroupRequest)
      returns (DeleteStorageProtectionGroupResponse) {}
  // ExecuteAction is used to update the action to failover, testfailover, failback, suspend, etc.
  rpc ExecuteAction(ExecuteActionRequest)
      returns (ExecuteActionResponse) {}
  // GetStorageProtectionGroupStatus is used to monitor the status of Storage Protection groups
  rpc GetStorageProtectionGroupStatus(GetStorageProtectionGroupStatusRequest)
      returns (GetStorageProtectionGroupStatusResponse) {}
}

message ProbeControllerRequest {
  // Intentionally left empty
}

// Metadata about the driver and its readiness
// for accepting the RPC calls.
message ProbeControllerResponse {
  // Name of the driver
  // This should be the same name which is advertised
  // to the CSI external provisioner
  string name = 1;
  // Version of the CSI driver
  string vendor_version = 2;

  map<string, string> manifest = 3;

  .google.protobuf.BoolValue ready = 4;
}

// Input request used in GetReplicationCapabilities API
message GetReplicationCapabilityRequest {
  // Intentionally left empty
}

// Capabilities of the driver, in terms of the
// RPC calls it supports
message GetReplicationCapabilityResponse {
  repeated ReplicationCapability capabilities = 1;
}

// ReplicationCapability is the set of replication capabilities
// which can be advertised by a CSI driver.
// For e.g. if a driver supports discovery of remote volume characteristics
// via the extensions API, then it needs to include DISCOVER_REMOTE_VOLUME
// in its list of replication capabilities
message ReplicationCapability {
  message RPC {
    enum Type {
      CREATE_REMOTE_VOLUME = 0;
      CREATE_PROTECTION_GROUP = 1;
      DELETE_PROTECTION_GROUP = 2;
      MONITOR_PROTECTION_GROUP = 3;
      REPLICATION_ACTION_EXECUTION = 4;
    }
    Type type = 1;
  }
  oneof type {
    RPC rpc = 1;
  }
}

message CreateRemoteVolumeRequest {
  // Handle of the local volume, whose remote replica is being requested
  string volume_handle = 1;
  // Optional information about the local volume
  // will be supplied if the driver returned this information
  // in the CSI CreateVolumeResponse
  map<string, string> parameters = 2;
}

message CreateStorageProtectionGroupRequest {
  // Handle of the volume, whose storage protection group is being requested,
  string volume_handle = 1;
  // Optional information about the Volume
  // will be supplied if the driver returned this information
  // in the CSI CreateVolumeResponse
  map<string, string> parameters = 2;
}

message CreateStorageProtectionGroupResponse {
  // Identifier for the local storage protection group
  // This should be unique for one CSI driver
  string local_protection_group_id = 1;
  // Identifier for the remote storage protection group
  // This should be unique for one CSI driver
  string remote_protection_group_id = 2;
  // Attributes for the local storage protection group
  map<string, string> local_protection_group_attributes = 3;
  // Attributes for the remote storage protection group
  map<string, string> remote_protection_group_attributes = 4;
}

// Information about the remote replica of a local volume
message CreateRemoteVolumeResponse {
  // Remote Volume
  Volume remote_volume = 1;
}

// Information about a specific volume
message Volume {
  // Size of the volume in bytes
  int64 capacity_bytes = 1;
  // Volume ID - should be the same as one
  // returned in the CSI CreateVolumeResponse
  string volume_id = 2;
  // Optional context information about the volume
  // which can be passed down to the driver in future calls
  map<string, string> volume_context = 3;
}

message DeleteStorageProtectionGroupRequest {
  // Unique identifier, representing the storage protection group
  string protection_group_id = 1;
  // Attributes of the storage protection group (optional)
  map<string, string> protection_group_attributes = 2;
}

message DeleteStorageProtectionGroupResponse {
  // Intentionally left empty
}

message Action{
  enum ActionTypes {
    FAILOVER = 0;
    FAILBACK = 1;
    SUSPEND = 2;
    RESUME = 3;
    ESTABLISH = 4;
    TEST_FAILOVER = 5;
    TEST_FAILOVER_STOP = 6;
  }
  ActionTypes action_types = 1;
}

message ExecuteActionRequest{
  string protection_group_id = 1;
  oneof action_types {
    Action action = 2;
  }
  map<string, string> protection_group_attributes = 3;
}

message ExecuteActionResponse{
  bool success = 1;
  oneof action_types {
    Action action = 2;
  }
}
message GetStorageProtectionGroupStatusRequest {
  // Protection group to be monitored
  string protection_group_id = 1;
  map<string, string> protection_group_attributes = 2;
}

message StorageProtectionGroupStatus {
  enum State {
    SYNCHRONIZED = 0;
    SYNC_IN_PROGRESS = 1;
    SUSPENDED = 2;
    FAILEDOVER = 3;
    INVALID = 4;
    UNKNOWN = 5;
  }
  // The state of the protection group
  State state = 1;
  // Optional map of storage protection group attributes
  map<string, string> storage_protection_group_attributes = 2;
}

message GetStorageProtectionGroupStatusResponse {
  // Returns status of the protection group
  StorageProtectionGroupStatus status = 1;
}

