// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: migration.proto

package migration

import (
	context "context"
	common "github.com/dell/dell-csi-extensions/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Migration_ProbeController_FullMethodName          = "/migration.v1.Migration/ProbeController"
	Migration_VolumeMigrate_FullMethodName            = "/migration.v1.Migration/VolumeMigrate"
	Migration_ArrayMigrate_FullMethodName             = "/migration.v1.Migration/ArrayMigrate"
	Migration_GetMigrationCapabilities_FullMethodName = "/migration.v1.Migration/GetMigrationCapabilities"
)

// MigrationClient is the client API for Migration service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MigrationClient interface {
	// ProbeController is used to verify if the CSI driver controller plugin is ready to service Replication APIs
	ProbeController(ctx context.Context, in *common.ProbeControllerRequest, opts ...grpc.CallOption) (*common.ProbeControllerResponse, error)
	// VolumeMigrate is used to migrate volume on storage array to different location/protection group
	VolumeMigrate(ctx context.Context, in *VolumeMigrateRequest, opts ...grpc.CallOption) (*VolumeMigrateResponse, error)
	// ArrayMigrate is to migrate all volumes from one storage array to a newer storay array
	ArrayMigrate(ctx context.Context, in *ArrayMigrateRequest, opts ...grpc.CallOption) (*ArrayMigrateResponse, error)
	// GetMigrationCapabilities is used to query CSI drivers for their supported migration capabilities
	GetMigrationCapabilities(ctx context.Context, in *GetMigrationCapabilityRequest, opts ...grpc.CallOption) (*GetMigrationCapabilityResponse, error)
}

type migrationClient struct {
	cc grpc.ClientConnInterface
}

func NewMigrationClient(cc grpc.ClientConnInterface) MigrationClient {
	return &migrationClient{cc}
}

func (c *migrationClient) ProbeController(ctx context.Context, in *common.ProbeControllerRequest, opts ...grpc.CallOption) (*common.ProbeControllerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.ProbeControllerResponse)
	err := c.cc.Invoke(ctx, Migration_ProbeController_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *migrationClient) VolumeMigrate(ctx context.Context, in *VolumeMigrateRequest, opts ...grpc.CallOption) (*VolumeMigrateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VolumeMigrateResponse)
	err := c.cc.Invoke(ctx, Migration_VolumeMigrate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *migrationClient) ArrayMigrate(ctx context.Context, in *ArrayMigrateRequest, opts ...grpc.CallOption) (*ArrayMigrateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ArrayMigrateResponse)
	err := c.cc.Invoke(ctx, Migration_ArrayMigrate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *migrationClient) GetMigrationCapabilities(ctx context.Context, in *GetMigrationCapabilityRequest, opts ...grpc.CallOption) (*GetMigrationCapabilityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMigrationCapabilityResponse)
	err := c.cc.Invoke(ctx, Migration_GetMigrationCapabilities_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MigrationServer is the server API for Migration service.
// All implementations should embed UnimplementedMigrationServer
// for forward compatibility.
type MigrationServer interface {
	// ProbeController is used to verify if the CSI driver controller plugin is ready to service Replication APIs
	ProbeController(context.Context, *common.ProbeControllerRequest) (*common.ProbeControllerResponse, error)
	// VolumeMigrate is used to migrate volume on storage array to different location/protection group
	VolumeMigrate(context.Context, *VolumeMigrateRequest) (*VolumeMigrateResponse, error)
	// ArrayMigrate is to migrate all volumes from one storage array to a newer storay array
	ArrayMigrate(context.Context, *ArrayMigrateRequest) (*ArrayMigrateResponse, error)
	// GetMigrationCapabilities is used to query CSI drivers for their supported migration capabilities
	GetMigrationCapabilities(context.Context, *GetMigrationCapabilityRequest) (*GetMigrationCapabilityResponse, error)
}

// UnimplementedMigrationServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMigrationServer struct{}

func (UnimplementedMigrationServer) ProbeController(context.Context, *common.ProbeControllerRequest) (*common.ProbeControllerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProbeController not implemented")
}
func (UnimplementedMigrationServer) VolumeMigrate(context.Context, *VolumeMigrateRequest) (*VolumeMigrateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VolumeMigrate not implemented")
}
func (UnimplementedMigrationServer) ArrayMigrate(context.Context, *ArrayMigrateRequest) (*ArrayMigrateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArrayMigrate not implemented")
}
func (UnimplementedMigrationServer) GetMigrationCapabilities(context.Context, *GetMigrationCapabilityRequest) (*GetMigrationCapabilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMigrationCapabilities not implemented")
}
func (UnimplementedMigrationServer) testEmbeddedByValue() {}

// UnsafeMigrationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MigrationServer will
// result in compilation errors.
type UnsafeMigrationServer interface {
	mustEmbedUnimplementedMigrationServer()
}

func RegisterMigrationServer(s grpc.ServiceRegistrar, srv MigrationServer) {
	// If the following call pancis, it indicates UnimplementedMigrationServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Migration_ServiceDesc, srv)
}

func _Migration_ProbeController_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ProbeControllerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MigrationServer).ProbeController(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Migration_ProbeController_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MigrationServer).ProbeController(ctx, req.(*common.ProbeControllerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Migration_VolumeMigrate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeMigrateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MigrationServer).VolumeMigrate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Migration_VolumeMigrate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MigrationServer).VolumeMigrate(ctx, req.(*VolumeMigrateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Migration_ArrayMigrate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArrayMigrateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MigrationServer).ArrayMigrate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Migration_ArrayMigrate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MigrationServer).ArrayMigrate(ctx, req.(*ArrayMigrateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Migration_GetMigrationCapabilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMigrationCapabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MigrationServer).GetMigrationCapabilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Migration_GetMigrationCapabilities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MigrationServer).GetMigrationCapabilities(ctx, req.(*GetMigrationCapabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Migration_ServiceDesc is the grpc.ServiceDesc for Migration service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Migration_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "migration.v1.Migration",
	HandlerType: (*MigrationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProbeController",
			Handler:    _Migration_ProbeController_Handler,
		},
		{
			MethodName: "VolumeMigrate",
			Handler:    _Migration_VolumeMigrate_Handler,
		},
		{
			MethodName: "ArrayMigrate",
			Handler:    _Migration_ArrayMigrate_Handler,
		},
		{
			MethodName: "GetMigrationCapabilities",
			Handler:    _Migration_GetMigrationCapabilities_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "migration.proto",
}
