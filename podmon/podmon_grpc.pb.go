// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package podmon

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PodmonClient is the client API for Podmon service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PodmonClient interface {
	// ValidateVolumeHostconnectivity validates host connectivity for one or more volumes, by
	// either or both of two methds:
	// 1. Verifying the link status of the host, returned in the connected.
	// 2. Verifying if any I/O activity has been observerd in the recent past, returned in ios_in_progress.
	ValidateVolumeHostConnectivity(ctx context.Context, in *ValidateVolumeHostConnectivityRequest, opts ...grpc.CallOption) (*ValidateVolumeHostConnectivityResponse, error)
}

type podmonClient struct {
	cc grpc.ClientConnInterface
}

func NewPodmonClient(cc grpc.ClientConnInterface) PodmonClient {
	return &podmonClient{cc}
}

func (c *podmonClient) ValidateVolumeHostConnectivity(ctx context.Context, in *ValidateVolumeHostConnectivityRequest, opts ...grpc.CallOption) (*ValidateVolumeHostConnectivityResponse, error) {
	out := new(ValidateVolumeHostConnectivityResponse)
	err := c.cc.Invoke(ctx, "/podmon.v1.Podmon/ValidateVolumeHostConnectivity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PodmonServer is the server API for Podmon service.
// All implementations should embed UnimplementedPodmonServer
// for forward compatibility
type PodmonServer interface {
	// ValidateVolumeHostconnectivity validates host connectivity for one or more volumes, by
	// either or both of two methds:
	// 1. Verifying the link status of the host, returned in the connected.
	// 2. Verifying if any I/O activity has been observerd in the recent past, returned in ios_in_progress.
	ValidateVolumeHostConnectivity(context.Context, *ValidateVolumeHostConnectivityRequest) (*ValidateVolumeHostConnectivityResponse, error)
}

// UnimplementedPodmonServer should be embedded to have forward compatible implementations.
type UnimplementedPodmonServer struct {
}

func (UnimplementedPodmonServer) ValidateVolumeHostConnectivity(context.Context, *ValidateVolumeHostConnectivityRequest) (*ValidateVolumeHostConnectivityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateVolumeHostConnectivity not implemented")
}

// UnsafePodmonServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PodmonServer will
// result in compilation errors.
type UnsafePodmonServer interface {
	mustEmbedUnimplementedPodmonServer()
}

func RegisterPodmonServer(s grpc.ServiceRegistrar, srv PodmonServer) {
	s.RegisterService(&Podmon_ServiceDesc, srv)
}

func _Podmon_ValidateVolumeHostConnectivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateVolumeHostConnectivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodmonServer).ValidateVolumeHostConnectivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/podmon.v1.Podmon/ValidateVolumeHostConnectivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodmonServer).ValidateVolumeHostConnectivity(ctx, req.(*ValidateVolumeHostConnectivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Podmon_ServiceDesc is the grpc.ServiceDesc for Podmon service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Podmon_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "podmon.v1.Podmon",
	HandlerType: (*PodmonServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ValidateVolumeHostConnectivity",
			Handler:    _Podmon_ValidateVolumeHostConnectivity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "podmon.proto",
}
